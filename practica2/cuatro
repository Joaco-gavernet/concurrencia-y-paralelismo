

a) ///////////////////////////// 
sem mutex = 1;

Process Persona[1..N] {
	P(mutex);
	Fotocopiar();	
	V(mutex);
}

b) ///////////////////////////// 
Observacion: Passing the baton. 

bool libre = true;
queue<int> q; // cola para mantener orden de llegada
sem mutex = 1;
vector<sem> b(n,0);

Process Persona[id: 1..N] {
	P(mutex);
	if (libre == false) {
		q.push(id);
		V(mutex);
		P(b[id]);
	}
	libre = false;
	V(mutex);

	// utilizar recurso

	P(mutex);
	libre = true;
	if (q.size() > 0) {
		q.pop();
		int next = q.front(); 
		V(b[next]);
	} else V(mutex);
}

c) Idem b) pero cambiando queue<int> por priority_queue<int>. 

d) /////////////////////////////
Observacion: Passing the baton secuencial. 

sem mutex = 1;
vector<sem> b(n,0);
int last = 0;

Process Persona[id: 1..N] {
	P(mutex);
	if (last != id-1) {
		V(mutex);
		P(b[id]);
	}
	V(mutex);

	// utilizar recurso

	P(mutex);
	last = id;
	V(b[id+1]);
	if (id == N) V(mutex);
}

e) ///////////////////////////// 
Observacion: Empleado hace de monitor de un recurso compartido, pero debemos resolver con semaforos.

queue<int> cola;
vector<sem> b(n,0);
sem mutex = 1;

Process Empleado {
	int tot = 0;

	while (tot < N) {
		P(mutex);
		int next = cola.front();
		cola.pop();
		V(mutex);
		V(b[next]);
		P(b[next]);
		tot++;
	}
}

Process Persona[id: 1..N] {
	P(mutex);
	cola.push(id);
	V(mutex);

	P(b[id]);
	// utilizar recurso 
	V(b[id]);
}


f) ////////////////////////////
Observacion: Extendiendo para el caso de M = 10 recursos y un monitor (Empleado).

queue<int> colaPersonas;
queue<int> colaImpresoras = {1..M};
vector<int> rec(n,-1); // vector para indicar que recurso le corresponde a cada persona.
vector<sem> b(n,0);
sem mutex = 1, mutex2 = 1, s = M, listo = x;
int termina;

Process Empleado {
	int tot = 0;

	while (tot < N) {
		P(mutex);
		int next = colaPersonas.front();
		colaPersonas.pop();
		V(mutex);

		colaImpresoras.push(rec[next]);
		rec[next] = 0;

		P(listo);

		tot++;
	}
}

Process Persona[id: 1..N] {
	P(mutex);
	colaPersonas.push(id);
	V(mutex);

	P(b[id]);
	// utilizar recurso 

	V(listo);
	P(mutex2);
	termina = rec[id]; // se comunica el recurso liberado
	V(mutex2);
	V(b[id]);
}
