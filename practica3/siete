7. Se debe simular una maratón con C corredores donde en la llegada hay UNA máquina expendedora de agua con capacidad para 20 botellas. Además existe un repositor encargado de reponer las botellas de la máquina. Cuando los C corredores han llegado al inicio comienza la carrera. Cuando un corredor termina la carrera se dirigen a la máquina expendedora, espera su turno (respetando el orden de llegada), saca una botella y se retira. Si encuentra la máquina sin botellas, le avisa al repositor para que cargue nuevamente la máquina con 20 botellas; espera a que se haga la recarga; saca una botella y se retira. Nota: maximizar la concurrencia; mientras se reponen las botellas se debe permitir que otros corredores se encolen. 

Monitor Carrera {
	int total = 0;
	cond runners;

	procedure preparado() {
		total++;
		if (total == C) signal_all(runners);
		else wait(runners);
	}
}

Monitor Stand {
	int esperando = 0;
	bool libre = true;
	cond q;

	procedure entrar() {
		if (libre == false) esperando++, wait(q);
		else libre = false;
	}

	procedure salir() {
		if (esperando > 0) esperando--, signal(q);
		else libre = true;
	}
}

Monitor Dispenser {
	queue<int> botellas = {1..20};

	procedure tomarBotella(int &codigo) {
		if (botellas.size() == 0) reponerBotellas(botellas); // TODO: chequear como deberia delegarse esta funcion o si se resuelve internamente
		codigo = botellas.pop();
	}
}

Process Corredor[id: 1..C] {
	int codigoBotella;

	Carrera.preparado();
	correr();

	Stand.entrar(id);
	Dispenser.tomarBotella(codigoBotella);
	Stand.salir(id);
}

