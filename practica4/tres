Problema: Se debe modelar una casa de Comida Rápida, en el cual trabajan 2 cocineros y 3 vendedores. Además, hay C clientes que dejan un pedido y quedan esperando a que se lo alcancen. 
Los pedidos que hacen los clientes son tomados por cualquiera de los vendedores y se lo pasan a los cocineros para que realicen el plato. 
Cuando no hay pedidos para atender, los vendedores aprovechan para reponer un pack de bebidas de la heladera (tardan entre 1 y 3 minutos para hacer esto). 
Repetidamente cada cocinero toma un pedido pendiente dejado por los vendedores, lo cocina y se lo entrega directamente al cliente correspondiente.
Nota: maximizar la concurrencia.

const int Q = 2;
const int V = 3;

// canales para los clientes
chan ordenes(int,string);
chan esperando[1..C](int);

// canales para los vendedores
chan PedidoVendedores(int);
chan Siguiente[1..V](int,string);

// compartido con cocineros
chan porPreparar(int,string); 


Process Cliente[id:1..C] {
	string menu = generarPedido();
	send ordenes(id,menu);

	string resultado;
	receive esperando[id](resultado);
}

Process CoordinadorVendedores {
	int idV;

	while (true) {
		int who = -1;
		string what = "";
		receive PedidoVendedores(idV);
		if (not empty(ordenes)) receive ordenes(who,what);
		send Siguiente[idV](who,what);
	}
}

Process Vendedor[id:1..V] {
	int who;
	string what;
	while (true) {
		send PedidoVendedores(id);
		receive Siguiente[id](who,what);
		if (who == -1) delay(random(1,3));
		else send porPreparar(who,what);
	}
}

// Para el caso de los cocineros no es necesario evitar el busy-waiting. 
Process Cocinero[1..Q] {
	int who;
	string what;
	while (true) {
		receive porPreparar(who,what);
		string resultado = preparar(what);
		send esperando[who](resultado);
	}
}


