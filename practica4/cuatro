// Problema: Simular la atención en un locutorio con 10 cabinas telefónicas, que tiene un empleado que se encarga de atender a los clientes. Hay N clientes que al llegar esperan hasta que el empleado les indica a que cabina ir, la usan y luego se dirigen al empleado para pagarle. 
El empleado atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando prioridad a los que terminaron de usar la cabina. Nota: maximizar la concurrencia; suponga que hay una función Cobrar() llamada por el empleado que simula que el empleado le cobra al cliente.  

const int T = 10;

chan pedidos(int,int);
chan siguienteCabina[1..C](int);
chan siguienteCobro[1..C](int);

Process Empleado {
	queue<int> libres = {1..T};
	queue<int> pendientes;
	int idC, cabina; 

	while (true) {
		receive pedido(idC,cabina);
		if (cabina != -1) { 
			// como recibe un numero de cabina valido, significa que esta siendo liberada
			ticket = cobrar();
			if (pendientes.size() > 0) send siguienteCobro[pendientes.pop()](ticket);
			else libres.push(cabina);
		else {
			// como recibe -1, significa que se solicita una cabina disponible
			if (libres.size() > 0) send siguienteCabina[idC](libres.pop());
			else pendientes.push(idC);
		}
	}
}

Process Cliente[id:1..C] {
	int cabina;
	string comprobante;

	send pedido(id,-1); // -1 indica que solicita una cabina
	receive siguienteCabina[id](cabina); // recibe numero de cabina

	usarCabina(cabina);

	send pedido(id,cabina); // indica la cabina que libera
	receive siguienteCobro[id](comprobante); // recibe el ticket de cobro
}
